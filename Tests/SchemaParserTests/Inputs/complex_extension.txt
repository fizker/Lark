typealias Employee = Fullpersoninfo
class Fullpersoninfo: Personinfo {
	var address: String
	var city: String
	var country: String
	init(firstname: String, lastname: String, address: String, city: String, country: String) {
		self.address = address
		self.city = city
		self.country = country
		super.init(firstname: firstname, lastname: lastname)
	}
	required init(deserialize element: XMLElement) throws {
		self.address = try .init(deserialize: element.element(forLocalName: "address", uri: "http://tempuri.org/tns"))
		self.city = try .init(deserialize: element.element(forLocalName: "city", uri: "http://tempuri.org/tns"))
		self.country = try .init(deserialize: element.element(forLocalName: "country", uri: "http://tempuri.org/tns"))
		try super.init(deserialize: element)
	}
	override func serialize(_ element: XMLElement) throws {
		try address.serialize(to: element, localName: "address", uri: "http://tempuri.org/tns")
		try city.serialize(to: element, localName: "city", uri: "http://tempuri.org/tns")
		try country.serialize(to: element, localName: "country", uri: "http://tempuri.org/tns")
		try super.serialize(element)
	}
}
class Personinfo: XMLCodable {
	var firstname: String
	var lastname: String
	init(firstname: String, lastname: String) {
		self.firstname = firstname
		self.lastname = lastname
	}
	required init(deserialize element: XMLElement) throws {
		self.firstname = try .init(deserialize: element.element(forLocalName: "firstname", uri: "http://tempuri.org/tns"))
		self.lastname = try .init(deserialize: element.element(forLocalName: "lastname", uri: "http://tempuri.org/tns"))
	}
	func serialize(_ element: XMLElement) throws {
		try firstname.serialize(to: element, localName: "firstname", uri: "http://tempuri.org/tns")
		try lastname.serialize(to: element, localName: "lastname", uri: "http://tempuri.org/tns")
	}
}
