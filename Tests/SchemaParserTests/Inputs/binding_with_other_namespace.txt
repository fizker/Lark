// This file was generated by Lark. https://github.com/fizker/Lark nÃ© https://github.com/Bouke/Lark

import Alamofire
import Foundation
import Lark

//
// MARK: - SOAP Structures
//
class MessageType: XMLCodable {
	init() {
	}
	required init(deserialize element: XMLElement) throws {
	}
	func serialize(_ element: XMLElement) throws {
	}
}

//
// MARK: - SOAP Client
//
class TestClient: Lark.Client {
	static let defaultEndpoint = URL(string: "http://localhost")!
	override init(endpoint: URL = TestClient.defaultEndpoint, session: Session = .init()) {
		super.init(endpoint: endpoint, session: session)
	}
	/// Call test synchronously
	func test() throws -> MessageType {
		let response = try call(
			action: URL(string: "")!,
			serialize: (prefix: "ns0", localName: "MessageType", uri: "http://tempuri.org/", {
				MessageType()
			}),
			deserialize: (localName: "MessageType", uri: "http://tempuri.org/",
				\MessageType.self
			))
		return try response.result.get()
	}
	/// Call test asynchronously
	@discardableResult func test(completionHandler: @escaping (Result<MessageType, Error>) -> Void) -> DataRequest {
		return call(
			action: URL(string: "")!,
			serialize: (prefix: "ns0", localName: "MessageType", uri: "http://tempuri.org/", {
				MessageType()
			}),
			deserialize: (localName: "MessageType", uri: "http://tempuri.org/",
				\MessageType.self
			),
			completionHandler: completionHandler)
	}
}

