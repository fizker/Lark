typealias MyElement = MyType
class MyType: XMLCodable {
	var a: String
	var b: String?
	var c: String
	var d: [String]
	var e: [String]
	init(a: String, b: String? = nil, c: String, d: [String], e: [String]) {
		self.a = a
		self.b = b
		self.c = c
		self.d = d
		self.e = e
	}
	required init(deserialize element: XMLElement) throws {
		self.a = try .init(deserialize: element.element(forLocalName: "a", uri: "http://tempuri.org/"))
		self.b = try element.element(forLocalName: "b", uri: "http://tempuri.org/", optional: true).map(String.init(deserialize:))
		self.c = try .init(deserialize: element.element(forLocalName: "c", uri: "http://tempuri.org/"))
		self.d = try element.elements(forLocalName: "d", uri: "http://tempuri.org/").map(String.init(deserialize:))
		self.e = try element.elements(forLocalName: "e", uri: "http://tempuri.org/").map(String.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try a.serialize(to: element, localName: "a", uri: "http://tempuri.org/")
		try b?.serialize(to: element, localName: "b", uri: "http://tempuri.org/")
		try c.serialize(to: element, localName: "c", uri: "http://tempuri.org/")
		try d.serializeAll(to: element, localName: "d", uri: "http://tempuri.org/")
		try e.serializeAll(to: element, localName: "e", uri: "http://tempuri.org/")
	}
}
