// This file was generated by Lark. https://github.com/Bouke/Lark

import Alamofire
import Foundation
import Lark

//
// MARK: - SOAP Structures
//
typealias Fault = FaultType

typealias FaultResponse = FaultResponseType

class FaultResponseType: XMLCodable {
	init() {
	}
	required init(deserialize element: XMLElement) throws {
	}
	func serialize(_ element: XMLElement) throws {
	}
}

class FaultType: XMLCodable {
	init() {
	}
	required init(deserialize element: XMLElement) throws {
	}
	func serialize(_ element: XMLElement) throws {
	}
}

typealias Greet = GreetType

typealias GreetResponse = GreetResponseType

class GreetResponseType: XMLCodable {
	var greetResult: String?
	init(greetResult: String? = nil) {
		self.greetResult = greetResult
	}
	required init(deserialize element: XMLElement) throws {
		self.greetResult = try element.element(forLocalName: "greetResult", uri: "spyne.examples.hello", nillable: true, optional: true).map(String.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try greetResult?.serialize(to: element, localName: "greetResult", uri: "spyne.examples.hello")
	}
}

class GreetType: XMLCodable {
	var partOfDay: PartOfDay?
	init(partOfDay: PartOfDay? = nil) {
		self.partOfDay = partOfDay
	}
	required init(deserialize element: XMLElement) throws {
		self.partOfDay = try element.element(forLocalName: "part_of_day", uri: "spyne.examples.hello", nillable: true, optional: true).map(PartOfDay.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try partOfDay?.serialize(to: element, localName: "part_of_day", uri: "spyne.examples.hello")
	}
}

typealias Greets = GreetsType

typealias GreetsResponse = GreetsResponseType

class GreetsResponseType: XMLCodable {
	var greetsResult: StringArrayType?
	init(greetsResult: StringArrayType? = nil) {
		self.greetsResult = greetsResult
	}
	required init(deserialize element: XMLElement) throws {
		self.greetsResult = try element.element(forLocalName: "greetsResult", uri: "spyne.examples.hello", nillable: true).map(StringArrayType.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try greetsResult.serialize(to: element, localName: "greetsResult", uri: "spyne.examples.hello")
	}
}

class GreetsType: XMLCodable {
	var partOfDays: PartOfDayArrayType?
	init(partOfDays: PartOfDayArrayType? = nil) {
		self.partOfDays = partOfDays
	}
	required init(deserialize element: XMLElement) throws {
		self.partOfDays = try element.element(forLocalName: "part_of_days", uri: "spyne.examples.hello", nillable: true).map(PartOfDayArrayType.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try partOfDays.serialize(to: element, localName: "part_of_days", uri: "spyne.examples.hello")
	}
}

enum PartOfDay: String, XMLSerializable, XMLDeserializable, StringSerializable, StringDeserializable {
	case afternoon = "afternoon"
	case evening = "evening"
	case morning = "morning"
	case night = "night"
	init(deserialize element: XMLElement) throws {
		self.init(rawValue: element.stringValue!)!
	}
	func serialize(_ element: XMLElement) throws {
		element.stringValue = self.rawValue
	}
	init(string: String) throws {
		self.init(rawValue: string)!
	}
	func serialize() throws -> String {
		return self.rawValue
	}
}

typealias PartOfDayArray = PartOfDayArrayType

class PartOfDayArrayType: XMLCodable {
	var partOfDay: [PartOfDay?]
	init(partOfDay: [PartOfDay?]) {
		self.partOfDay = partOfDay
	}
	required init(deserialize element: XMLElement) throws {
		self.partOfDay = try element.elements(forLocalName: "PartOfDay", uri: "spyne.examples.hello", nillable: true, map: PartOfDay.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try partOfDay.serializeAll(to: element, localName: "PartOfDay", uri: "spyne.examples.hello")
	}
}

typealias SayHello = SayHelloType

typealias SayHelloResponse = SayHelloResponseType

class SayHelloResponseType: XMLCodable {
	var sayHelloResult: StringArrayType?
	init(sayHelloResult: StringArrayType? = nil) {
		self.sayHelloResult = sayHelloResult
	}
	required init(deserialize element: XMLElement) throws {
		self.sayHelloResult = try element.element(forLocalName: "say_helloResult", uri: "spyne.examples.hello", nillable: true).map(StringArrayType.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try sayHelloResult.serialize(to: element, localName: "say_helloResult", uri: "spyne.examples.hello")
	}
}

class SayHelloType: XMLCodable {
	var name: String?
	var times: Int?
	init(name: String? = nil, times: Int? = nil) {
		self.name = name
		self.times = times
	}
	required init(deserialize element: XMLElement) throws {
		self.name = try element.element(forLocalName: "name", uri: "spyne.examples.hello", nillable: true, optional: true).map(String.init(deserialize:))
		self.times = try element.element(forLocalName: "times", uri: "spyne.examples.hello", nillable: true, optional: true).map(Int.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try name?.serialize(to: element, localName: "name", uri: "spyne.examples.hello")
		try times?.serialize(to: element, localName: "times", uri: "spyne.examples.hello")
	}
}

typealias SayMaybeNothing = SayMaybeNothingType

typealias SayMaybeNothingResponse = SayMaybeNothingResponseType

class SayMaybeNothingResponseType: XMLCodable {
	var sayMaybeNothingResult: String?
	init(sayMaybeNothingResult: String? = nil) {
		self.sayMaybeNothingResult = sayMaybeNothingResult
	}
	required init(deserialize element: XMLElement) throws {
		self.sayMaybeNothingResult = try element.element(forLocalName: "say_maybe_nothingResult", uri: "spyne.examples.hello", nillable: true, optional: true).map(String.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try sayMaybeNothingResult?.serialize(to: element, localName: "say_maybe_nothingResult", uri: "spyne.examples.hello")
	}
}

class SayMaybeNothingType: XMLCodable {
	var name: String?
	init(name: String? = nil) {
		self.name = name
	}
	required init(deserialize element: XMLElement) throws {
		self.name = try element.element(forLocalName: "name", uri: "spyne.examples.hello", nillable: true, optional: true).map(String.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try name?.serialize(to: element, localName: "name", uri: "spyne.examples.hello")
	}
}

typealias SayMaybeSomething = SayMaybeSomethingType

typealias SayMaybeSomethingResponse = SayMaybeSomethingResponseType

class SayMaybeSomethingResponseType: XMLCodable {
	var sayMaybeSomethingResult: String?
	init(sayMaybeSomethingResult: String? = nil) {
		self.sayMaybeSomethingResult = sayMaybeSomethingResult
	}
	required init(deserialize element: XMLElement) throws {
		self.sayMaybeSomethingResult = try element.element(forLocalName: "say_maybe_somethingResult", uri: "spyne.examples.hello", nillable: true, optional: true).map(String.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try sayMaybeSomethingResult?.serialize(to: element, localName: "say_maybe_somethingResult", uri: "spyne.examples.hello")
	}
}

class SayMaybeSomethingType: XMLCodable {
	var name: String?
	init(name: String? = nil) {
		self.name = name
	}
	required init(deserialize element: XMLElement) throws {
		self.name = try element.element(forLocalName: "name", uri: "spyne.examples.hello", nillable: true, optional: true).map(String.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try name?.serialize(to: element, localName: "name", uri: "spyne.examples.hello")
	}
}

typealias SayNothing = SayNothingType

typealias SayNothingResponse = SayNothingResponseType

class SayNothingResponseType: XMLCodable {
	init() {
	}
	required init(deserialize element: XMLElement) throws {
	}
	func serialize(_ element: XMLElement) throws {
	}
}

class SayNothingType: XMLCodable {
	init() {
	}
	required init(deserialize element: XMLElement) throws {
	}
	func serialize(_ element: XMLElement) throws {
	}
}

typealias Secret = SecretType

typealias SecretResponse = SecretResponseType

class SecretResponseType: XMLCodable {
	init() {
	}
	required init(deserialize element: XMLElement) throws {
	}
	func serialize(_ element: XMLElement) throws {
	}
}

class SecretType: XMLCodable {
	init() {
	}
	required init(deserialize element: XMLElement) throws {
	}
	func serialize(_ element: XMLElement) throws {
	}
}

typealias StringArray = StringArrayType

class StringArrayType: XMLCodable {
	var string: [String?]
	init(string: [String?]) {
		self.string = string
	}
	required init(deserialize element: XMLElement) throws {
		self.string = try element.elements(forLocalName: "string", uri: "spyne.examples.hello", nillable: true, map: String.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try string.serializeAll(to: element, localName: "string", uri: "spyne.examples.hello")
	}
}

//
// MARK: - SOAP Client
//
class HelloWorldServiceClient: Lark.Client {
	static let defaultEndpoint = URL(string: "http://localhost:8000/")!
	override init(endpoint: URL = HelloWorldServiceClient.defaultEndpoint, session: Session = .init()) {
		super.init(endpoint: endpoint, session: session)
	}
	/// Call sayHello synchronously
	func sayHello(name: String? = nil, times: Int? = nil) throws -> StringArrayType? {
		let response = try call(
			action: URL(string: "say_hello")!,
			serialize: (prefix: "ns0", localName: "say_hello", uri: "spyne.examples.hello", {
				SayHelloType(name: name, times: times)
			}),
			deserialize: (localName: "say_helloResponse", uri: "spyne.examples.hello",
				\SayHelloResponseType.sayHelloResult
			))
		return try response.result.get()
	}
	/// Call sayHello asynchronously
	@discardableResult func sayHello(name: String? = nil, times: Int? = nil, completionHandler: @escaping (Result<StringArrayType?, Error>) -> Void) -> DataRequest {
		return call(
			action: URL(string: "say_hello")!,
			serialize: (prefix: "ns0", localName: "say_hello", uri: "spyne.examples.hello", {
				SayHelloType(name: name, times: times)
			}),
			deserialize: (localName: "say_helloResponse", uri: "spyne.examples.hello",
				\SayHelloResponseType.sayHelloResult
			),
			completionHandler: completionHandler)
	}
	/// Call sayMaybeNothing synchronously
	func sayMaybeNothing(name: String? = nil) throws -> String? {
		let response = try call(
			action: URL(string: "say_maybe_nothing")!,
			serialize: (prefix: "ns0", localName: "say_maybe_nothing", uri: "spyne.examples.hello", {
				SayMaybeNothingType(name: name)
			}),
			deserialize: (localName: "say_maybe_nothingResponse", uri: "spyne.examples.hello",
				\SayMaybeNothingResponseType.sayMaybeNothingResult
			))
		return try response.result.get()
	}
	/// Call sayMaybeNothing asynchronously
	@discardableResult func sayMaybeNothing(name: String? = nil, completionHandler: @escaping (Result<String?, Error>) -> Void) -> DataRequest {
		return call(
			action: URL(string: "say_maybe_nothing")!,
			serialize: (prefix: "ns0", localName: "say_maybe_nothing", uri: "spyne.examples.hello", {
				SayMaybeNothingType(name: name)
			}),
			deserialize: (localName: "say_maybe_nothingResponse", uri: "spyne.examples.hello",
				\SayMaybeNothingResponseType.sayMaybeNothingResult
			),
			completionHandler: completionHandler)
	}
	/// Call fault synchronously
	func fault() throws -> FaultResponseType {
		let response = try call(
			action: URL(string: "fault")!,
			serialize: (prefix: "ns0", localName: "fault", uri: "spyne.examples.hello", {
				FaultType()
			}),
			deserialize: (localName: "faultResponse", uri: "spyne.examples.hello",
				\FaultResponseType.self
			))
		return try response.result.get()
	}
	/// Call fault asynchronously
	@discardableResult func fault(completionHandler: @escaping (Result<FaultResponseType, Error>) -> Void) -> DataRequest {
		return call(
			action: URL(string: "fault")!,
			serialize: (prefix: "ns0", localName: "fault", uri: "spyne.examples.hello", {
				FaultType()
			}),
			deserialize: (localName: "faultResponse", uri: "spyne.examples.hello",
				\FaultResponseType.self
			),
			completionHandler: completionHandler)
	}
	/// Call sayMaybeSomething synchronously
	func sayMaybeSomething(name: String? = nil) throws -> String? {
		let response = try call(
			action: URL(string: "say_maybe_something")!,
			serialize: (prefix: "ns0", localName: "say_maybe_something", uri: "spyne.examples.hello", {
				SayMaybeSomethingType(name: name)
			}),
			deserialize: (localName: "say_maybe_somethingResponse", uri: "spyne.examples.hello",
				\SayMaybeSomethingResponseType.sayMaybeSomethingResult
			))
		return try response.result.get()
	}
	/// Call sayMaybeSomething asynchronously
	@discardableResult func sayMaybeSomething(name: String? = nil, completionHandler: @escaping (Result<String?, Error>) -> Void) -> DataRequest {
		return call(
			action: URL(string: "say_maybe_something")!,
			serialize: (prefix: "ns0", localName: "say_maybe_something", uri: "spyne.examples.hello", {
				SayMaybeSomethingType(name: name)
			}),
			deserialize: (localName: "say_maybe_somethingResponse", uri: "spyne.examples.hello",
				\SayMaybeSomethingResponseType.sayMaybeSomethingResult
			),
			completionHandler: completionHandler)
	}
	/// Call greet synchronously
	func greet(partOfDay: PartOfDay? = nil) throws -> String? {
		let response = try call(
			action: URL(string: "greet")!,
			serialize: (prefix: "ns0", localName: "greet", uri: "spyne.examples.hello", {
				GreetType(partOfDay: partOfDay)
			}),
			deserialize: (localName: "greetResponse", uri: "spyne.examples.hello",
				\GreetResponseType.greetResult
			))
		return try response.result.get()
	}
	/// Call greet asynchronously
	@discardableResult func greet(partOfDay: PartOfDay? = nil, completionHandler: @escaping (Result<String?, Error>) -> Void) -> DataRequest {
		return call(
			action: URL(string: "greet")!,
			serialize: (prefix: "ns0", localName: "greet", uri: "spyne.examples.hello", {
				GreetType(partOfDay: partOfDay)
			}),
			deserialize: (localName: "greetResponse", uri: "spyne.examples.hello",
				\GreetResponseType.greetResult
			),
			completionHandler: completionHandler)
	}
	/// Call sayNothing synchronously
	func sayNothing() throws -> SayNothingResponseType {
		let response = try call(
			action: URL(string: "say_nothing")!,
			serialize: (prefix: "ns0", localName: "say_nothing", uri: "spyne.examples.hello", {
				SayNothingType()
			}),
			deserialize: (localName: "say_nothingResponse", uri: "spyne.examples.hello",
				\SayNothingResponseType.self
			))
		return try response.result.get()
	}
	/// Call sayNothing asynchronously
	@discardableResult func sayNothing(completionHandler: @escaping (Result<SayNothingResponseType, Error>) -> Void) -> DataRequest {
		return call(
			action: URL(string: "say_nothing")!,
			serialize: (prefix: "ns0", localName: "say_nothing", uri: "spyne.examples.hello", {
				SayNothingType()
			}),
			deserialize: (localName: "say_nothingResponse", uri: "spyne.examples.hello",
				\SayNothingResponseType.self
			),
			completionHandler: completionHandler)
	}
	/// Call secret synchronously
	func secret() throws -> SecretResponseType {
		let response = try call(
			action: URL(string: "secret")!,
			serialize: (prefix: "ns0", localName: "secret", uri: "spyne.examples.hello", {
				SecretType()
			}),
			deserialize: (localName: "secretResponse", uri: "spyne.examples.hello",
				\SecretResponseType.self
			))
		return try response.result.get()
	}
	/// Call secret asynchronously
	@discardableResult func secret(completionHandler: @escaping (Result<SecretResponseType, Error>) -> Void) -> DataRequest {
		return call(
			action: URL(string: "secret")!,
			serialize: (prefix: "ns0", localName: "secret", uri: "spyne.examples.hello", {
				SecretType()
			}),
			deserialize: (localName: "secretResponse", uri: "spyne.examples.hello",
				\SecretResponseType.self
			),
			completionHandler: completionHandler)
	}
	/// Call greets synchronously
	func greets(partOfDays: PartOfDayArrayType? = nil) throws -> StringArrayType? {
		let response = try call(
			action: URL(string: "greets")!,
			serialize: (prefix: "ns0", localName: "greets", uri: "spyne.examples.hello", {
				GreetsType(partOfDays: partOfDays)
			}),
			deserialize: (localName: "greetsResponse", uri: "spyne.examples.hello",
				\GreetsResponseType.greetsResult
			))
		return try response.result.get()
	}
	/// Call greets asynchronously
	@discardableResult func greets(partOfDays: PartOfDayArrayType? = nil, completionHandler: @escaping (Result<StringArrayType?, Error>) -> Void) -> DataRequest {
		return call(
			action: URL(string: "greets")!,
			serialize: (prefix: "ns0", localName: "greets", uri: "spyne.examples.hello", {
				GreetsType(partOfDays: partOfDays)
			}),
			deserialize: (localName: "greetsResponse", uri: "spyne.examples.hello",
				\GreetsResponseType.greetsResult
			),
			completionHandler: completionHandler)
	}
}

