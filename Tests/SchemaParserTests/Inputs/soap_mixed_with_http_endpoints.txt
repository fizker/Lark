// This file was generated by Lark. https://github.com/Bouke/Lark

import Alamofire
import Foundation
import Lark

//
// MARK: - SOAP Structures
//
class GetSMSCodes: XMLCodable {
	var identifier: String?
	init(identifier: String? = nil) {
		self.identifier = identifier
	}
	required init(deserialize element: XMLElement) throws {
		self.identifier = try element.element(forLocalName: "identifier", uri: "http://tempuri.org/", optional: true).map(String.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try identifier?.serialize(to: element, localName: "identifier", uri: "http://tempuri.org/")
	}
}

class GetSMSCodesResponse: XMLCodable {
	var getSMSCodesResult: String?
	init(getSMSCodesResult: String? = nil) {
		self.getSMSCodesResult = getSMSCodesResult
	}
	required init(deserialize element: XMLElement) throws {
		self.getSMSCodesResult = try element.element(forLocalName: "GetSMSCodesResult", uri: "http://tempuri.org/", optional: true).map(String.init(deserialize:))
	}
	func serialize(_ element: XMLElement) throws {
		try getSMSCodesResult?.serialize(to: element, localName: "GetSMSCodesResult", uri: "http://tempuri.org/")
	}
}

typealias StringType = String?

//
// MARK: - SOAP Client
//
class ExampleClient: Lark.Client {
	static let defaultEndpoint = URL(string: "http://tempuri.org/Example.asmx")!
	override init(endpoint: URL = ExampleClient.defaultEndpoint, session: Session = .init()) {
		super.init(endpoint: endpoint, session: session)
	}
	/// Call getSMSCodes synchronously
	func getSMSCodes(identifier: String? = nil) throws -> String? {
		let response = try call(
			action: URL(string: "http://tempuri.org/GetSMSCodes")!,
			serialize: (prefix: "ns0", localName: "GetSMSCodes", uri: "http://tempuri.org/", {
				GetSMSCodes(identifier: identifier)
			}),
			deserialize: (localName: "GetSMSCodesResponse", uri: "http://tempuri.org/",
				\GetSMSCodesResponse.getSMSCodesResult
			))
		return try response.result.get()
	}
	/// Call getSMSCodes asynchronously
	@discardableResult func getSMSCodes(identifier: String? = nil, completionHandler: @escaping (Result<String?, Error>) -> Void) -> DataRequest {
		return call(
			action: URL(string: "http://tempuri.org/GetSMSCodes")!,
			serialize: (prefix: "ns0", localName: "GetSMSCodes", uri: "http://tempuri.org/", {
				GetSMSCodes(identifier: identifier)
			}),
			deserialize: (localName: "GetSMSCodesResponse", uri: "http://tempuri.org/",
				\GetSMSCodesResponse.getSMSCodesResult
			),
			completionHandler: completionHandler)
	}
}

